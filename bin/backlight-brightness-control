#!/usr/bin/env bash

# ./backlight-brightness-control
#
# use \w sudo or add udev rule `/etc/udev/rules.d/backlight.rules`:
#   ACTION=="add", SUBSYSTEM=="backlight", KERNEL=="acpi_video0", RUN+="/bin/chgrp video /sys/class/backlight/%k/brightness"
#   ACTION=="add", SUBSYSTEM=="backlight", KERNEL=="acpi_video0", RUN+="/bin/chmod g+w /sys/class/backlight/%k/brightness"
# where `acpi_video0` its u vendor && add u user 2 video group:
#   usermod -aG video $USER
#
# see --help for usage
#
# example:
#   ./script --vendor <vendor> --get
#   ./script -v <vendor> --set 2
#   ./script --set 5
#   ./script -i
#   ./script -d
#
# author: @qbbr

usage() {
	echo "usage: ${0##*/} [option] [argument]"
	echo
	echo "Options:"
	echo "	-v, --vendor    - Set vendor, optional [default=acpi_video0]"
	echo "	-g, --get       - Get current brightness"
	echo "	-m, --get-max   - Get max value"
	echo "	-s, --set       - Set brightness"
	echo "	-t, --set-max   - Set max value"
	echo "	-b, --set-min   - Set min value"
	echo "	-i, --increment - Increment brightness value (+1)"
	echo "	-d, --decrement - Decrement brightness value (-1)"
	echo "	-h, --help      - Display this help"
	exit 0
}

fail() {
	echo "$1"
	exit 1
}

success() {
	echo "$1"
	exit 0
}

POSITIONAL=()

while [[ $# -gt 0 ]]; do
	key="$1"

	case $key in
		-v|--vendor)
			VENDOR="$2"
			shift # past argument
			shift # past value
		;;
		-g|--get)
			GET_VALUE=1
			shift # past argument
			;;
		-m|--get-max)
			GET_MAX_VALUE=1
			shift
			;;
		-s|--set)
			SET_VALUE="$2"
			shift # past argument
			shift # past value
			;;
		-t|--set-max)
			SET_MAX_VALUE=1
			shift
			;;
		-b|--set-min)
			SET_MIN_VALUE=1
			shift
			;;
		-i|--increment)
			INCREMENT=1
			shift # past argument
			shift # past value
			;;
		-d|--decrement)
			DECREMENT=1
			shift # past argument
			shift # past value
			;;
		-h|--help)
			usage
			;;
		*) # unknown option
			POSITIONAL+=("$1") # save it in an array for later
			shift # past argument
			;;
	esac
done

set -- "${POSITIONAL[@]}" # restore positional parameter

VENDOR="${VENDOR:-acpi_video0}" # set default vendor if n
SYSFS_PATH="/sys/class/backlight/${VENDOR}"

if [[ ! -d "${SYSFS_PATH}" ]]; then
	fail "Vendor '${VENDOR}' not found"
fi

getValue() {
	cat "${SYSFS_PATH}/brightness"
}

getMaxValue() {
	cat "${SYSFS_PATH}/max_brightness"
}

setValue() {
	NEW_VALUE=${1}
	MIN_VALUE=0
	MAX_VALUE=$(getMaxValue)

	if [[ "${NEW_VALUE}" -lt "${MIN_VALUE}"  ]] || [[ "${NEW_VALUE}" -gt "${MAX_VALUE}" ]]; then
		echo "Set value '${NEW_VALUE}' is not valid (min: ${MIN_VALUE}, max: ${MAX_VALUE})"
		exit 1
	else
		echo "${NEW_VALUE}" > "${SYSFS_PATH}/brightness"
	fi
}

if [[ -n "${GET_VALUE}" ]]; then
	success $(getValue)
elif [[ -n "${GET_MAX_VALUE}" ]]; then
	success $(getMaxValue)
elif [[ -n "${SET_VALUE}" ]]; then
	setValue ${SET_VALUE}
	success ${SET_VALUE}
elif [[ -n "${SET_MAX_VALUE}" ]]; then
	MAX_VALUE=$(getMaxValue)
	setValue ${MAX_VALUE}
	success ${MAX_VALUE}
elif [[ -n "${SET_MIN_VALUE}" ]]; then
	MIN_VALUE=0
	setValue ${MIN_VALUE}
	success ${MIN_VALUE}
elif [[ -n "${INCREMENT}" ]]; then
	VALUE=$(getValue)
	setValue $((++VALUE))
	success ${VALUE}
elif [[ -n "${DECREMENT}" ]]; then
	VALUE=$(getValue)
	setValue $((--VALUE))
	success ${VALUE}
else
	fail "Nothing to do, see --help"
fi
